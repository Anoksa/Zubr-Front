import { Sphere } from "../interface/sphere";

export const PROGRAMMING: Sphere = {
    name: "programming",
    viewName: "Программирование 10 класс",
    description: "Программирование – это процесс создания компьютерных программ.",
    content: /*html*/`
        <ol>
            <li>ОБЩИЕ ПОЛОЖЕНИЯ</li>
        </ol>
        <p>Программирование &ndash; это процесс создания компьютерных программ.</p>
        <ol start="2">
            <li>О СОРЕВНОВАНИИ</li>
        </ol>
        <p>Задачи можно решать с помощью любого языка программирования: Python, Java, C#, C++, C и др.</p>
        <ol start="3">
            <li>ТРЕБОВАНИЯ К УЧАСТНИКАМ</li>
        </ol>
        <p>Для выполнения задания участники должны владеть знаниями и навыками:</p>
        <p>- владеть одним из языков программирования: C/C#, Python, Java и др.;</p>
        <p>- уметь пользоваться соответствующими редакторами кода: Visual Studio, Intellij IDEA, PyCharm и др.;</p>
        <p>- уметь пользоваться графическими библиотеками/модулями соответствующих редакторов (WF/WPF, JavaFX и прочие);</p>
        <p>- уметь пользоваться основными принципами ООП;</p>
        <p>- обладать достаточными знаниями для работы с основными рабочими единицами кода (переменными, включая типы и ссылки,
            классами, массивами).</p>
        <p>Во время выполнения задания участника запрещено:</p>
        <p>- использовать интернет;</p>
        <p>- мобильное устройство;</p>
        <p>- просить помощь у руководителей в момент выполнения заданий.</p>
        <p>Программное обеспечение, которое должно быть установлено на ноутбуке участников:</p>
        <p>- редактор кода (Visual Studio, Intellij IDEA, PyCharm и др.);</p>
        <p>- соответствующие моду</p>
        <ol start="4">
            <li>КОНКУРСНОЕ ЗАДАНИЕ</li>
        </ol>
        <p>В данном задании участнику необходимо создать приложение, которое будет составлять календарь турниров.</p>
        <p>В республике проводится турнир по робофутболу, в котором каждая команда встречается в одно круговом турнире с каждой
            1 раз. За победу начисляется 3 очка, за ничью &ndash; 1 очко, за проигрыш 0 очков. По итогам турнира определяются 4
            лучшие команды, которые разыгрывают между собой 1 место по следующей схеме: команда, ставшая победителем кругового
            турнира, встречается с командой, занявшей 4 место, команда, занявшая 2 место, встречается с командой, занявший 3
            место. Победители матчей встречаются между собой в матче за первое место.</p>
        <p>Необходимо составить программу, которая будет:</p>
        <p>1) автоматически составлять календарь игр;</p>
        <p>2) вести учет результатов матчей календаря (будет позволять вводить счет каждой игры вручную);</p>
        <p>3) выводить итоговую турнирную таблицу (количество очков, побед, ничьих, проигрышей, разница забитых и пропущенных
            мячей);</p>
        <p>4) определять по итогам всего турнира 4 лучшие команды;</p>
        <p>5) определять команду, занявшую первое место.</p>
        <p>Входные данные:</p>
        <ul>
            <li>n (n&lt;=10) &ndash; количество команд;</li>
            <li>названия команд (n &ndash; слов).</li>
        </ul>
        <p>Выходные данные:</p>
        <ul>
            <li>название победившей команды;</li>
            <li>рейтинг турнира.</li>
        </ul>
        <p>Приложение должно быть с графическим интерфейсом.</p>
        <p>Разработка приложения для Windows не ниже 7.</p>
        <ol start="5">
            <li>КРИТЕРИИ ОЦЕНИВАНИЯ</li>
        </ol>
        <table>
            <tbody>
                <tr>
                    <td>
                        <p>Максимальное количество баллов</p>
                    </td>
                    <td>
                        <p>100</p>
                    </td>
                    <td>
                        <p>Примечания</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Из них:</p>
                    </td>
                    <td>&nbsp;</td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>
                        <p>Работоспособность (правильные ответы при проверке на входных тестах)</p>
                    </td>
                    <td>
                        <p>30</p>
                    </td>
                    <td>
                        <p>Если программа в целом написано верно, но имеются быстро исправимые очевидные опечатки,
                            препятствующие
                            запуску, то при проверке возможна минимальная коррекция текста, а оценка будет снижена</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Оптимальность алгоритма (выбор способа реализации улучшающих время работы или использование памяти)
                        </p>
                    </td>
                    <td>
                        <p>20</p>
                    </td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>
                        <p>Оптимальные языковые конструкции (уместное использование сложных или, напротив простых
                            &laquo;читабельных&raquo; синтаксических конструкций, учет побочных эффектов)</p>
                    </td>
                    <td>
                        <p>10</p>
                    </td>
                    <td>&nbsp;</td>
                </tr>
                <tr>
                    <td>
                        <p>Полнота и уместность проверки входных данных (корректность условий проверки)</p>
                    </td>
                    <td>
                        <p>10</p>
                    </td>
                    <td>
                        <p>Оценивается только при ненулевой работоспособности</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Стиль кода (наличие стиля и структурирования, качество комментариев)</p>
                    </td>
                    <td>
                        <p>15</p>
                    </td>
                    <td>
                        <p>Оценивается только при ненулевой работоспособности</p>
                    </td>
                </tr>
                <tr>
                    <td>
                        <p>Интерфейс и грамотность (удобство ввода данных, правильность формулировок приглашений ко вводу и
                            пояснение
                            при выводе)</p>
                    </td>
                    <td>
                        <p>15</p>
                    </td>
                    <td>
                        <p>Оценивается только при ненулевой работоспособности</p>
                    </td>
                </tr>
            </tbody>
        </table>
        <ol start="6">
            <li>ПОРЯДОК ПРОВЕДЕНИЯ СОРЕВНОВАНИЙ</li>
        </ol>
        <p>Во время проведения конкурса участник должен знать и строго соблюдать правила безопасного поведения учащихся на
            конкурсной площадке</p>
        <p>За грубые нарушения правила безопасного поведения учащихся, которые привели к порче оборудования, инструмента, травме или созданию аварийной ситуации, участник отстраняется от дальнейшего участия в конкурсе. Решение об отстранении принимает главный судья.</p>
        <ol start="7">
            <li>ПРАВИЛА ОПРЕДЕЛЕНИЯ ПОБЕДИТЕЛЯ</li>
        </ol>
        <p>Участник, набравший наибольшее количество баллов за выполнение двух конкурсных заданий, считается победителем.</p>
        <p>В случае набора участниками одинакового количества баллов, победителем конкурса считается участник, набравший
            наибольшее количество баллов и выполнивший конкурсные задания за наименьшее время.</p>
        <p>В случае разногласий окончательное решение оценки конкурса принимает главный судья.</p>
    `
}
